{"version":3,"sources":["logo.svg","components/NavBar.js","components/Intro.js","components/ProfilePhoto.js","components/Project.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","eventKey","Styles","styled","div","Intro","ProfilePhoto","src","alt","Project","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,6LCG9BC,EAAS,kBAClB,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACzD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,iBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,OACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,YACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,2BAC/B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,YACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,YAGJ,kBAACK,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,cACA,kBAACK,EAAA,EAAIE,KAAL,CAAUI,SAAU,EAAGX,KAAK,UAA5B,kB,2GCfN,IAAMY,EAASC,IAAOC,IAAV,KAGCC,EAAQ,WACjB,OACI,kBAACH,EAAD,KACI,6BACI,qCACA,8J,gICRhB,IAAMA,EAASC,IAAOC,IAAV,KASCE,EAAe,WACxB,OACI,6BACI,6CACA,kBAAC,EAAD,KACI,yBAAKC,IAAK,yBAA0BC,IAAK,aCX5CC,EAAU,WACnB,OACI,6BAAK,wCACD,6BACI,yEACA,4BACI,8FACA,qGACA,qIAGR,6BACA,iDACI,4BACI,8JAEA,gKAIR,6BACI,8BAEJ,6BACI,gCCNDC,E,iLAbX,OAEC,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,0C,GAVWC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08a90f6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component} from 'react'\nimport {Nav, Navbar, NavDropdown} from 'react-bootstrap';\n\nexport const NavBar = () => (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n  <Navbar.Brand href=\"#home\">Tyron Samaroo</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#features\">Bio</Nav.Link>\n      <Nav.Link href=\"#pricing\">Projects</Nav.Link>\n      <NavDropdown title=\"About Me\" id=\"collasible-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Interest</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Social</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Nav>\n      <Nav.Link href=\"#deets\">More deets</Nav.Link>\n      <Nav.Link eventKey={2} href=\"#memes\">\n        Dank memes\n      </Nav.Link>\n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n)","import React from 'react'\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n    padding: 20px;\n`;\nexport const Intro = () => {\n    return (\n        <Styles>\n            <div>\n                <h2>Intro</h2>\n                <p>I am a undergraduate at Queens College of New York. I am currently majoring in Computer Science and minoring in Mathamatics.</p>\n            </div>\n        </Styles>\n    )\n}\n\n","import React from 'react'\nimport styled from 'styled-components'\n//import mypic from './images/tyronpic.jpeg';\nconst Styles = styled.div`\nheight: 100;\nradius: 50;\ntext-align:center;\n\n\n\t\n\n`;\nexport const ProfilePhoto = () => {\n    return (\n        <div>\n            <h2>Tyron Samaroo</h2>\n            <Styles>\n                <img src={'./images/tyronpic.jpeg'} alt={\"mypic\" }/>\n            </Styles>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport styled from 'styled-components'\n\n\n\n\nexport const Project = () => {\n    return(\n        <div><h1>Projects</h1>\n            <div>\n                <h2>Personal Trainer Client Management System</h2>\n                <ul>\n                    <li>Create a database in MySQL to record client’s biometrics </li>\n                    <li>Generate a nutrition and training plan tailored to client’s goal</li>\n                    <li>Implement a graphical user interface using Python to display the information in an appealing manner</li>\n                </ul>\n            </div>\n            <div>\n            <h2>Autonomous RC Car</h2>\n                <ul>\n                    <li>Took apart an RC Car and added own hardware such as Arduino,Raspberry Pi,,L298N Motor Driver to control throttle\n                         and steering </li>\n                    <li>Upgraded to Raspberry Pi to control functionality of RC Car with Python, and started training and record throttle \n                        and steering</li>\n                </ul>\n            </div>\n            <div>\n                <h2></h2>\n            </div>\n            <div>\n                <h2></h2>\n            </div>\n            \n            \n        </div>\n    )\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {NavBar} from './components/NavBar';\nimport {Intro} from './components/Intro';\nimport {ProfilePhoto} from './components/ProfilePhoto';\nimport {Project} from './components/Project';\n\nclass App extends Component{\n  render(){\n    return(\n     // <NavBar></NavBar>\n     <div>\n       <NavBar/>\n       <ProfilePhoto/>\n       <Intro/>\n       <Project/>\n       \n       <h2>Hello</h2>\n     </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}